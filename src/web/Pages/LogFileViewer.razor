@using System.Text.Json;
@page "/fileviewer"
@inject NotificationService notificationService

<PageTitle>File Viewer</PageTitle>

<h1>File Viewer</h1>

<InputFile OnChange="@LoadFilesAsync" multiple>Upload json file(s)</InputFile>

@if (files.Count > 0)
{
    <LoadedFileGrid Files="@files" FileRemoved="RemoveFile" />

    <EventTimeChart EventTimes="@flows.Select(f => f.Time)" />

    <div class="chart-grid-spacer"></div>

    <FlowDataGrid Flows="@flows" />
}
else
{
    <div id="no-files-div">
        <span>Upload a file to get started!</span>
    </div>
}

@code {
    private List<LoadedFile> files = new List<LoadedFile>();
    private List<string> errors = new();
    private List<Flow> flows = new();
    private long maxAllowedSize = 1024 * 1024 * 10; // 10 MB

    private async Task LoadFilesAsync(InputFileChangeEventArgs e)
    {
        errors = new();
        var browserFiles = e.GetMultipleFiles();
        var filteredFiles = FilterFilesAndNotifyErrors(browserFiles);
        AddLoadedFiles(filteredFiles);

        foreach (var file in filteredFiles)
        {
            if (IsFileJson(file))
            {
                await LoadFileAsync(file);
            }
            else 
            {
                errors.Add($"{file.Name} is not a json file");
            }
        }
        
        SendErrorNotifications();
    }

    private IEnumerable<IBrowserFile> FilterFilesAndNotifyErrors(IEnumerable<IBrowserFile> files)
    {
        files.Where(f => !IsFileJson(f)).ToList().ForEach(f => SendErrorNotification($"{f.Name} is not a json file"));
        return files.Where(f => IsFileJson(f));
    }

    private void AddLoadedFiles(IEnumerable<IBrowserFile> browserFiles)
    {
        foreach (var file in browserFiles)
        {
            files.Add(new LoadedFile {
                FileName = file.Name,
                IsLoading = true,
                Size = file.Size,
                BrowserFileHashCode = file.GetHashCode()
            });
        }
    }

    private bool IsFileJson(IBrowserFile file) => file.ContentType == "application/json";

    private async Task LoadFileAsync(IBrowserFile browserFile)
    {
        var fileHashCode = browserFile.GetHashCode();
        var readStream = browserFile.OpenReadStream(maxAllowedSize: maxAllowedSize);
        var flowLogFile = await JsonSerializer.DeserializeAsync<FlowLogFile>(readStream, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        
        if (flowLogFile != null)
        {
            flows.AddRange(FlowParser.Parse(flowLogFile, fileHashCode));
        }
        else
        {
            errors.Add($"File {browserFile.Name} is not a valid FlowLogFile");
        }

        files.Where(f => f.BrowserFileHashCode == fileHashCode).First().IsLoading = false;
    }

    private void SendErrorNotifications()
    {
        foreach (var error in errors)
        {
            SendErrorNotification(error);
        }
    }

    private void SendErrorNotification(string error)
    {
        notificationService.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Detail = error,
            Summary = "Error loading file",
            Duration = 8000
        });
    }

    private void RemoveFile(LoadedFile file)
    {

        files.RemoveAll(f => f.BrowserFileHashCode == file.BrowserFileHashCode);
        flows.RemoveAll(f => f.BrowserFileHashCode == file.BrowserFileHashCode);
        StateHasChanged();
    }
}
