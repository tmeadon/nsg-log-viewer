@page "/fileviewer"
@inject NotificationService notificationService
@inject DialogService dialogService

<PageTitle>File Viewer</PageTitle>

<InputFile OnChange="@LoadFilesAsync" multiple>Upload json file(s)</InputFile>

@if (files.Count > 0)
{
    <LoadedFileTable Files="@files" FileRemoved="RemoveFile" />

    <EventTimeChart EventTimes="@flows.Select(f => f.Time)" />

    <div class="chart-grid-spacer"></div>

    <FlowDataGrid Flows="@flows" />
}
else
{
    <div id="no-files-div">
        <span>Upload a file to get started!</span>
    </div>
}

@code {
    private List<LoadedFile> files = new List<LoadedFile>();
    private List<string> errors = new();
    private List<Flow> flows = new();
    private FlowLogFileParser flowLogFileParser = new();

    private async Task LoadFilesAsync(InputFileChangeEventArgs e)
    {
        ShowBusyDialog();
        var browserFiles = e.GetMultipleFiles();
        AddLoadedFiles(browserFiles);

        foreach (var file in browserFiles)
        {
            await TryLoadFileAsync(file);
        }   

        CloseBusyDialogIfAllFilesHaveLoaded();
    }

    private void ShowBusyDialog()
    {
        dialogService.OpenAsync("", ds => 
            @<div>
                <div class="row">
                    <div class="col-md-12">
                        Loading...
                    </div>
                </div>
        </div>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto" });
    }

    private void AddLoadedFiles(IEnumerable<IBrowserFile> browserFiles)
    {
        foreach (var file in browserFiles)
        {
            files.Add(new LoadedFile {
                FileName = file.Name,
                IsLoading = true,
                Size = file.Size,
                BrowserFileHashCode = file.GetHashCode()
            });
        }
    }

    private async Task TryLoadFileAsync(IBrowserFile file)
    {
        try
        {
            await LoadFileAsync(file);
        }
        catch (BrowserFileLoaderException ex)
        {
            HandleLoadError(ex.Message, file.GetHashCode());
        }
        catch (Exception ex)
        {
            HandleLoadError("An unknown error occurred while loading the file.", file.GetHashCode());
            Console.WriteLine(ex.Message);
        }
    }

    private async Task LoadFileAsync(IBrowserFile file)
    {
        var fileLoader = new BrowserFileLoader(file, flowLogFileParser);
        var loadedFlows = await fileLoader.LoadAsync();
        flows.AddRange(loadedFlows);
        UpdateLoadedFile(loadedFlows, file.GetHashCode());
        StateHasChanged();
    }

    private void UpdateLoadedFile(IEnumerable<Flow> fileFlows, int fileHashCode)
    {
        var parsedFile = files.Where(f => f.BrowserFileHashCode == fileHashCode).First();
        parsedFile.FirstFlowTime = fileFlows.First().Time;
        parsedFile.LastFlowTime = fileFlows.Last().Time;
        parsedFile.FlowCount = fileFlows.Count();
        parsedFile.IsLoading = false;
    }

    private void HandleLoadError(string error, int fileHashCode)
    {
        var file = files.Where(f => f.BrowserFileHashCode == fileHashCode).First();
        file.LoadError = error;
        file.IsLoading = false;
        SendErrorNotification(error);                
    }

    private void SendErrorNotification(string error)
    {
        notificationService.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Detail = error,
            Summary = "Error loading file",
            Duration = 8000
        });
    }

    private void RemoveFile(LoadedFile file)
    {

        files.RemoveAll(f => f.BrowserFileHashCode == file.BrowserFileHashCode);
        flows.RemoveAll(f => f.BrowserFileHashCode == file.BrowserFileHashCode);
        StateHasChanged();
    }

    private void CloseBusyDialogIfAllFilesHaveLoaded()
    {
        if (files.All(f => !f.IsLoading))
        {
            Console.WriteLine("dialog close");
            dialogService.Close();
        }
    }
}
