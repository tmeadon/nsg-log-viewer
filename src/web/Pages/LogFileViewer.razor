@using System.Text.Json;
@page "/fileviewer"
@inject NotificationService notificationService

<PageTitle>File Viewer</PageTitle>

<h1>File Viewer</h1>

<InputFile OnChange="@LoadFilesAsync" multiple>Upload json file(s)</InputFile>

<LoadedFileGrid Files="@files" FileRemoved="@RemoveFile" />

<EventTimeChart EventTimes="@flows.Select(f => f.Time)" />

<FlowDataGrid Flows="@flows" />

@code {
    private List<LoadedFile> files = new();
    private List<string> errors = new();
    private List<Flow> flows = new();
    private long maxAllowedSize = 1024 * 1024 * 10; // 10 MB

    private async Task LoadFilesAsync(InputFileChangeEventArgs e)
    {
        errors = new();

        foreach (var file in e.GetMultipleFiles())
        {
            if (file.ContentType == "application/json")
            {
                var fileHashCode = file.GetHashCode();

                files.Add(new LoadedFile {
                    FileName = file.Name,
                    IsLoading = true,
                    Size = file.Size,
                    BrowserFileHashCode = fileHashCode 
                });

                var readStream = file.OpenReadStream(maxAllowedSize: maxAllowedSize);
                var flowLogFile = await JsonSerializer.DeserializeAsync<FlowLogFile>(readStream, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                
                if (flowLogFile != null)
                {
                    flows.AddRange(FlowParser.Parse(flowLogFile, fileHashCode));
                }
                else
                {
                    errors.Add($"File {file.Name} is not a valid FlowLogFile");
                }

                files.Where(f => f.BrowserFileHashCode == fileHashCode).First().IsLoading = false;
            }
            else 
            {
                errors.Add($"{file.Name} is not a json file");
            }
        }
        
        SendErrorNotifications();
    }

    private void SendErrorNotifications()
    {
        foreach (var error in errors)
        {
            notificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Detail = error,
                Summary = "Error loading file",
                Duration = 8000
            });
        }
    }

    private void RemoveFile(LoadedFile file)
    {

        files.RemoveAll(f => f.BrowserFileHashCode == file.BrowserFileHashCode);
        flows.RemoveAll(f => f.BrowserFileHashCode == file.BrowserFileHashCode);
        StateHasChanged();
    }
}
