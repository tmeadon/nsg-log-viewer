@using System.Text.Json;
@page "/fileviewer"
@inject NotificationService notificationService

<PageTitle>File Viewer</PageTitle>

<h1>File Viewer</h1>

<InputFile OnChange="@LoadFilesAsync" multiple>Upload json file(s)</InputFile>

@if (isLoading)
{
    <p>Loading files...</p>
}
else 
{
    <p>Files:</p>
    <ul>
        @foreach (var file in files)
        {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                    <li>Hash code: @file.GetHashCode()</li>
                    <li><RadzenButton Click="@(args => RemoveFile(file.GetHashCode()))" Text="Remove" /></li>
                </ul>
            </li>
        }
    </ul>

    <EventTimeChart EventTimes="@flows.Select(f => f.Time)" />

    <FlowDataGrid Flows="@flows" />
}

@code {
    private List<IBrowserFile> files = new();
    private bool isLoading = false;
    private List<string> errors = new();
    private List<Flow> flows = new();
    private long maxAllowedSize = 1024 * 1024 * 10; // 10 MB

    private async Task LoadFilesAsync(InputFileChangeEventArgs e)
    {
        isLoading = true;
        errors = new();

        foreach (var file in e.GetMultipleFiles())
        {
            if (file.ContentType == "application/json")
            {
                files.Add(file);

                var fileHashCode = file.GetHashCode();
                var readStream = file.OpenReadStream(maxAllowedSize: maxAllowedSize);
                var flowLogFile = await JsonSerializer.DeserializeAsync<FlowLogFile>(readStream, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                
                if (flowLogFile != null)
                {
                    flows.AddRange(FlowParser.Parse(flowLogFile, fileHashCode));
                }
                else
                {
                    errors.Add($"File {file.Name} is not a valid FlowLogFile");
                }
            }
            else 
            {
                errors.Add($"{file.Name} is not a json file");
            }
        }
        
        SendErrorNotifications();
        isLoading = false;
    }

    private void SendErrorNotifications()
    {
        foreach (var error in errors)
        {
            notificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Detail = error,
                Summary = "Error loading file",
                Duration = 8000
            });
        }
    }

    private void RemoveFile(int browserFileHashCode)
    {
        files.RemoveAll(f => f.GetHashCode() == browserFileHashCode);
        flows.RemoveAll(f => f.BrowserFileHashCode == browserFileHashCode);
        StateHasChanged();
    }
}
