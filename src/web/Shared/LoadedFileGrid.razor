<div class="container" style="max-width: 95%; padding: 1em;">
        <div class="row">
        @for (int i = 0; i <= Files.Count; i += colsPerRow)
        {
            @foreach (var file in Files.Skip(i).Take(colsPerRow))
            {
                <div class="col-2">
                    <RadzenCard Style="padding-top: 0.2em; padding-right: 0.2em; padding-bottom: 1.25em;">
                        <div style="width: 100%;">
                            <div style="float: right; height: 1em;">
                                <RadzenButton Icon="clear" Size="ButtonSize.Small" Click="@(() => FileRemoved.InvokeAsync(file))" ButtonStyle="ButtonStyle.Light" />
                            </div>
                        </div>
                        <div class="@GetFileDivClass(file)">
                            <div class="file-loading-status-icon text-center">
                                <div class="spinner-border loading-icon-div" role="status">
                                    <span class="sr-only">Loading...</span>
                                </div>
                                <div class="loaded-icon-div">
                                    <RadzenIcon Icon="check_circle" class="loaded-icon" Style="vertical-align: middle;" />
                                </div>
                            </div>
                            <span>@file.FileName</span>
                        </div>
                    </RadzenCard>
                </div>
            }
            <div class="w-100"></div>
        }
        </div>
</div>

@code {
    [Parameter]
    public List<LoadedFile> Files { get; set; } = new();

    [Parameter]
    public EventCallback<LoadedFile> FileRemoved { get; set; }

    private int colsPerRow = 6;

    private string GetFileDivClass(LoadedFile file) => file.IsLoading ? "file-loading" : "file-loaded";
}